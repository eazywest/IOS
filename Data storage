import Foundation

protocol JSONSerializable: Encodable {}

protocol JSONDeserializable: Decodable {}

typealias JSONCodable = JSONSerializable & JSONDeserializable

struct Request<T: JSONCodable> {
    let data: T
    let requestID: String 

    init(data: T, requestID: String = UUID().uuidString) { 
        self.data = data
        self.requestID = requestID
    }
}

protocol RequestStorable {
    associatedtype RequestType: JSONCodable
    func saveRequest(request: Request<RequestType>)
    func loadRequest(requestID: String) -> Request<RequestType>?
    func clearRequest(requestID: String)
}


class RequestStorage<T: JSONCodable>: RequestStorable {
    typealias RequestType = T

    func saveRequest(request: Request<RequestType>) {
        let encoder = JSONEncoder()
        do {
            let encodedData = try encoder.encode(request)
            UserDefaults.standard.set(encodedData, forKey: request.requestID)
            print("Request saved successfully with ID: \(request.requestID)")
        } catch {
            print("Failed to encode request: \(error)")
        }
    }

    func loadRequest(requestID: String) -> Request<RequestType>? {
        guard let data = UserDefaults.standard.data(forKey: requestID) else {
            print("No request found with ID: \(requestID)")
            return nil
        }

        let decoder = JSONDecoder()
        do {
            let decodedRequest = try decoder.decode(Request<RequestType>.self, from: data)
            print("Request loaded successfully with ID: \(requestID)")
            return decodedRequest
        } catch {
            print("Failed to decode request: \(error)")
            return nil
        }
    }

    func clearRequest(requestID: String) {
        UserDefaults.standard.removeObject(forKey: requestID)
        print("Request cleared with ID: \(requestID)")
    }
}


struct UserProfile: JSONCodable {
    let id: Int
    let name: String
    let email: String
}

let requestStorage = RequestStorage<UserProfile>()

let newUserProfile = UserProfile(id: 1, name: "Bob", email: "Bob@example.com")

let userRequest = Request(data: newUserProfile)

requestStorage.saveRequest(request: userRequest)

if let loadedRequest = requestStorage.loadRequest(requestID: userRequest.requestID) {
    print("Loaded Request: \(loadedRequest.data)")
}

requestStorage.clearRequest(requestID: userRequest.requestID)
